/// <reference types="mongoose/types/aggregate" />
/// <reference types="mongoose/types/callback" />
/// <reference types="mongoose/types/collection" />
/// <reference types="mongoose/types/connection" />
/// <reference types="mongoose/types/cursor" />
/// <reference types="mongoose/types/document" />
/// <reference types="mongoose/types/error" />
/// <reference types="mongoose/types/expressions" />
/// <reference types="mongoose/types/helpers" />
/// <reference types="mongoose/types/middlewares" />
/// <reference types="mongoose/types/indexes" />
/// <reference types="mongoose/types/models" />
/// <reference types="mongoose/types/mongooseoptions" />
/// <reference types="mongoose/types/pipelinestage" />
/// <reference types="mongoose/types/populate" />
/// <reference types="mongoose/types/query" />
/// <reference types="mongoose/types/schemaoptions" />
/// <reference types="mongoose/types/schematypes" />
/// <reference types="mongoose/types/session" />
/// <reference types="mongoose/types/types" />
/// <reference types="mongoose/types/utility" />
/// <reference types="mongoose/types/validation" />
/// <reference types="mongoose/types/virtuals" />
/// <reference types="mongoose/types/inferschematype" />
import { Model, Document } from 'mongoose';
import { IData, IErrorObject } from '../../interface';
export declare class MongoDbDao<T extends Document> implements IData<T> {
    defaultModel: typeof Model;
    save(data: Document | any): Promise<Document | any> | IErrorObject;
    saveMany(data: Array<Document>): Promise<any>;
    update(params: any, data: Document | any): Promise<Document | any> | IErrorObject;
    updateMany(params: any, data: Document | any): Promise<Document | any> | IErrorObject;
    select(payloads: {
        params?: object;
        excludes?: string;
        page?: number;
        pageSize?: number;
        sort?: string;
        orderBy?: string;
    }): Promise<any | IErrorObject>;
    selectOne(params: object, fields?: string): Promise<Document | any> | IErrorObject;
    selectLatest(status?: string): Promise<Document | any> | IErrorObject;
    count(params: object): Promise<any> | IErrorObject;
    exist(params: object): Promise<boolean | any> | IErrorObject;
    aggregate(params: Array<any>): Promise<any> | IErrorObject;
    selectHug(params?: any): Promise<Array<Document> | any> | IErrorObject;
    remove(params: any): Promise<any> | IErrorObject;
    removeMany(params: any): Promise<any> | IErrorObject;
}
