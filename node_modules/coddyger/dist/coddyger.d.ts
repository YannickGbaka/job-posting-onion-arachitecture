declare const coddyger: {
    api: (context: any, promise: Promise<any>) => void;
    konsole: (msg: any, error?: number) => void;
    string: {
        isEmpty: (value: any) => boolean;
        isEmailAddress: (payload: string) => boolean;
        isNumber: (payload: string) => boolean;
        isDate: (payload: string) => boolean;
        isValidObjectId: (payload: string) => boolean;
        generateObjectId: () => any;
        toObjectId: (value: any) => any;
        encryptPassword: (payload: string) => Promise<string>;
        decryptPassword: (payload: string, hashedPayload: string) => Promise<boolean>;
        capitalizeEachWord: (payload: string) => string;
    };
    array: {
        compare: (array1: Array<any>, array2: Array<any>) => boolean;
        inArray: (needle: any, haystack: any) => boolean;
    };
    buildApiError: (payload: any) => {
        errors: {
            value: any;
            msg: any;
            param: any;
            location: any;
        };
    };
    inArray: (needle: any, haystack: any) => boolean;
    getDate: (type?: string) => string | Date;
    dateOnlyFormat: (date: any) => string;
    file: {
        remove: (filePath: string) => void;
        extension: (filename: string) => string;
        toBase64: (filename: string) => string;
        exists: (filePath: string) => boolean;
        download: (url: string, filename: string) => Promise<unknown>;
    };
    root: () => string;
    sanitizeEmail: (email: string) => string;
    paginate: (array: Array<any>, page_size: number, page_number: number) => any[];
    calculateDaysBetween(startDate: Date): number;
    filesInclude(dir: any, payload: string): any[];
    catchReturn(e: any, location: string, method: string): {
        status: number;
        message: string;
    } | {
        status: number;
        message: string;
        data: any;
    };
    buildSlug(prefix: string, lastReference?: string | null): string;
    getDaysInMonth: (month: number, year: number) => number;
    getWeeksInMonth: (month: number, year: number) => any[];
};
export default coddyger;
