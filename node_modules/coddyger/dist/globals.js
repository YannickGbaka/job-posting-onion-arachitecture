"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.defines = exports.mails = void 0;
// Environment variables imported from .env file
const dotenv = __importStar(require("dotenv"));
dotenv.config();
const env = {
    appName: process.env.APP_NAME || 'Coddyger Typescript API',
    mode: process.env.ENV || 'dev',
    domain: process.env.DOMAIN,
    description: process.env.DESCRIPTION || '',
    server: {
        port: process.env.SERVER_PORT || 3000,
        apiVersion: process.env.API_VERSION || 'v1',
        serverPath: process.env.SERVER_PATH || '/coddyger',
        origins: (_a = process.env.ORIGINS) !== null && _a !== void 0 ? _a : '*',
    },
    database: {
        useDatabase: process.env.USE_DB || 'no',
        connectionString: process.env.DB_URI,
        dialect: process.env.DB_DIALECT,
        storage: process.env.DB_STORAGE
    },
    transporter: {
        broker: process.env.TR_BROKER || process.env.KAFKA_BROKER,
        client: process.env.TR_CLIENT || process.env.KAFKA_CLIENT,
        topic: process.env.TR_TOPIC || process.env.KAFKA_TOPIC,
        group: process.env.TR_GROUP || process.env.KAFKA_GROUP,
        foreigners: process.env.TR_FOREIGNERS || process.env.KAFKA_FOREIGNERS
    },
    jwt: {
        secret: process.env.JWT_SECRET,
        secretAuth: process.env.JWT_AUTH_SECRET,
        public: process.env.JWT_PUBLIC,
        expire: process.env.JWT_EXPIRE || '1h',
        expireRefresh: process.env.JWT_REFRESH_EXPIRE || '24h'
    },
    paths: {
        logger: process.env.LOGGER_PATH
    }
};
exports.mails = {
    support: process.env.SUPPORT_MAIL || 'grebejordan@gmail.com',
    logReport: process.env.SUPPORT_MAIL || 'grebejordan@gmail.com'
};
exports.defines = {
    status: {
        requestOK: 200,
        created: 201,
        noContent: 204,
        badRequest: 400,
        authError: 401,
        forbidden: 403,
        notFound: 404,
        notAllowed: 405,
        clientError: 422,
        tooMany: 429,
        serverError: 500
    },
    message: {
        tryCatch: "Une erreur imprévue s'est produite. Veuillez réessayer. Si le problème persiste, veuillez contacter le service client.",
        badRequest: 'Votre requête contient une ou plusieurs erreurs',
        notFound: 'Route introuvable ou inexistante'
    },
    tryCatchObject: (data) => {
        return {
            data,
            error: true,
            message: "Une erreur imprévue s'est produite. Veuillez réessayer. Si le problème persiste, veuillez contacter le service client."
        };
    },
    controlerTryCatchObject: {
        status: 500,
        message: "Une erreur imprévue s'est produite. Veuillez réessayer. Si le problème persiste, veuillez contacter le service client."
    }
};
exports.default = env;
