"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransporterService = void 0;
const kafkajs_1 = require("kafkajs");
const globals_1 = __importDefault(require("../globals"));
const logger_service_1 = require("./logger.service");
const coddyger_1 = __importDefault(require("../coddyger"));
class TransporterService {
    constructor(topics) {
        this.topics = [];
        this.kafka = new kafkajs_1.Kafka({
            clientId: globals_1.default.transporter.client,
            brokers: [globals_1.default.transporter.broker],
            logLevel: kafkajs_1.logLevel.ERROR
        });
        this.producer = this.kafka.producer();
        this.consumer = this.kafka.consumer({
            groupId: globals_1.default.transporter.group
        });
        this.topics = topics;
    }
    send(value, topic) {
        return new Promise((resolve, reject) => {
            this.producer.connect().then(() => {
                this.producer.send({
                    topic: !coddyger_1.default.string.isEmpty(topic) ? topic : globals_1.default.transporter.topic,
                    messages: [
                        {
                            value
                        }
                    ]
                });
            });
        });
    }
    get() {
        try {
            this.consumer.connect().then(() => __awaiter(this, void 0, void 0, function* () {
                coddyger_1.default.konsole(`Transporter connected! :: ${globals_1.default.transporter.broker}`);
                for (let x in this.topics) {
                    let topic = this.topics[x];
                    // Start consuming from registrered topics
                    yield this.consumer.subscribe({ topic: topic.id, fromBeginning: true });
                }
                // Start consumer
                this.consumer.run({
                    eachMessage: (payload) => __awaiter(this, void 0, void 0, function* () {
                        let msg = {
                            partition: payload.partition,
                            offset: payload.message.offset,
                            value: payload.message.value.toString()
                        };
                        console.log('Consuming from ::', payload.topic);
                        let data = JSON.parse(msg.value);
                        for (let x in this.topics) {
                            let topic = this.topics[x];
                            let topicId = topic.id;
                            let topicSet = topic.set;
                            if (payload.topic === topicId) {
                                this.getData(data, topicSet, topicId);
                            }
                        }
                    })
                });
            }));
        }
        catch (e) {
            console.log(e);
            logger_service_1.LoggerService.log({
                type: logger_service_1.LogLevel.Error,
                content: JSON.stringify(e),
                location: 'TransporterCore',
                method: 'get'
            });
        }
    }
    getData(data, set, label) {
        let _id = data._id;
        const dao = new set();
        if (data.action === 'remove') {
            dao.remove({ _id }).then((remove) => {
                if (remove.error) {
                    logger_service_1.LoggerService.log({
                        type: logger_service_1.LogLevel.Error,
                        content: JSON.stringify(remove),
                        location: 'TransporterCore',
                        method: label + '-remove'
                    });
                }
                else {
                    coddyger_1.default.konsole(label + ' removed successfully :: ' + _id);
                }
            });
        }
        else {
            try {
                if (coddyger_1.default.string.isValidObjectId(_id)) {
                    dao.exist({ _id }).then((exist) => {
                        if (exist.error) {
                            logger_service_1.LoggerService.log({
                                type: logger_service_1.LogLevel.Error,
                                content: JSON.stringify(exist),
                                location: 'TransporterCore',
                                method: label + '-exist'
                            });
                        }
                        else {
                            if (!exist) {
                                dao.save(data).then((save) => {
                                    if (save.error) {
                                        logger_service_1.LoggerService.log({
                                            type: logger_service_1.LogLevel.Error,
                                            content: JSON.stringify(save),
                                            location: 'TransporterCore',
                                            method: label + '-save'
                                        });
                                    }
                                    else {
                                        coddyger_1.default.konsole(label + ' saved successfully :: ' + _id);
                                    }
                                });
                            }
                            else {
                                delete data._id;
                                dao
                                    .update({
                                    _id
                                }, data)
                                    .then((update) => {
                                    if (update.error) {
                                        logger_service_1.LoggerService.log({
                                            type: logger_service_1.LogLevel.Error,
                                            content: JSON.stringify(update),
                                            location: 'TransporterCore',
                                            method: label + '-update'
                                        });
                                    }
                                    else {
                                        coddyger_1.default.konsole(label + ' edited successfully :: ' + _id);
                                    }
                                });
                            }
                        }
                    });
                }
                else {
                    logger_service_1.LoggerService.log({
                        type: logger_service_1.LogLevel.Error,
                        content: 'Wrong _id detected::' + _id,
                        location: 'TransporterCore',
                        method: 'getData'
                    });
                }
            }
            catch (e) {
                logger_service_1.LoggerService.log({
                    type: logger_service_1.LogLevel.Error,
                    content: JSON.stringify(e),
                    location: 'TransporterCore',
                    method: 'getData'
                });
            }
        }
    }
}
exports.TransporterService = TransporterService;
