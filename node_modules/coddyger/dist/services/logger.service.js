"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerService = exports.LogLevel = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const coddyger_1 = __importDefault(require("../coddyger"));
var LogLevel;
(function (LogLevel) {
    LogLevel["Info"] = "info";
    LogLevel["Debug"] = "debug";
    LogLevel["Warn"] = "warn";
    LogLevel["Error"] = "error";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class LoggerService {
    static log(payload) {
        const { type, content, location, method } = payload;
        if (Object.values(LogLevel).includes(type)) {
            LoggerService.createLog(type, content, location, method);
        }
        else {
            LoggerService.createLog(LogLevel.Error, 'Invalid log type', location, method);
        }
    }
    static createLog(type, content, location, method) {
        try {
            const currentDate = new Date().toISOString();
            const logDirectory = coddyger_1.default.string.isEmpty(location) ? 'mixed' : location;
            const logPath = path.join('/src/logs/', logDirectory);
            const fullPath = path.join(coddyger_1.default.root(), logPath);
            if (!fs.existsSync(fullPath)) {
                console.log('Generating log directory...', currentDate);
                fs.mkdirSync(fullPath, { recursive: true, mode: 0o777 });
                console.log('Done!', new Date().toISOString());
            }
            const filename = coddyger_1.default.dateOnlyFormat(currentDate);
            const logStream = fs.createWriteStream(path.join(fullPath, `${filename}.log`), { flags: 'a', mode: 0o777 });
            if (type !== LogLevel.Info) {
                logStream.write(`[${type}]::${currentDate}::${location}::${method}::${JSON.stringify(content).replace(/\n/g, '')}\n`);
            }
            console.log('\nNEW LOG ->', currentDate);
            console.log(content.toString().replace(/\n/g, ''));
        }
        catch (error) {
            console.log('ERROR::', error);
        }
    }
}
exports.LoggerService = LoggerService;
