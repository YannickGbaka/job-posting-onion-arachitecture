import { Sequelize, DataTypes, Model, Options, InitOptions } from 'sequelize';
import env from '../../globals';
import coddyger from '../../coddyger';

export class SequelizeDataAccess {
	private sequelize: Sequelize;

	constructor() {
		// Récupérez la chaîne de connexion à partir de la configuration
		const connectionString = env.database.connectionString;

		// Configuration pour le dialecte de la base de données (MySQL, PostgreSQL, etc.)
		const options: any = {
			dialect: env.database.dialect!,
			storage: env.database.storage!,
			logging: false // Vous pouvez activer ou désactiver les journaux de requêtes selon vos besoins.
		};

		this.sequelize = new Sequelize(connectionString!, options);
	}

	async connect() {
		try {
			await this.sequelize.authenticate();
			coddyger.konsole('SQL connecté');
		} catch (err: any) {
			coddyger.konsole('SQL error', 1);
			console.log(err);
		}
	}

	// Ajoutez ici des modèles Sequelize pour vos tables de base de données
	// Par exemple :
	// User = this.sequelize.define('User', {
	//   firstName: {
	//     type: DataTypes.STRING,
	//   },
	//   lastName: {
	//     type: DataTypes.STRING,
	//   },
	// });

	// Définissez des méthodes pour gérer les opérations CRUD, par exemple, find, create, update, delete.
}
