export interface IErrorObject {
	error: boolean;
	data: any;
	message?: string;
}

export interface IApi {
	status?: number;
	message: string | object;
	data?: any;
}

export interface IData<T> {
	save(item: T): Promise<T> | IErrorObject;
	saveMany(items: []): Promise<T[]> | IErrorObject;
	update(params: any, item: T | any): Promise<T | null> | IErrorObject;
	updateMany(params: any, item: T | any): Promise<T | null> | IErrorObject;

	select(params?: any): Promise<Array<T> | null | IErrorObject>;
	selectOne(params: any, fields?: string): Promise<Array<T> | null> | IErrorObject;
	selectLatest(status?: string): Promise<Array<T> | null> | IErrorObject;
	count(params: any): Promise<number | null> | IErrorObject;
	exist(params?: any): Promise<boolean> | IErrorObject;
	aggregate(params: any): Promise<any> | IErrorObject;
	selectHug(params?: any): Promise<Array<T> | null> | IErrorObject;

	remove(params: any): Promise<T> | IErrorObject;
	removeMany(params: any): Promise<T> | IErrorObject; 
}

export interface IEnvironment {
  appName: string;
  mode: string;
  domain?: string;
  description?: string;
  server: {
    port: number | string;
    apiVersion: string;
    serverPath: string;
    origins: string;
  };
  database: {
    useDatabase: string;
    connectionString?: string;
    dialect?: string;
    storage?: string;
  };
  transporter: {
    broker: string;
    client: string;
    topic: string;
    group: string;
    foreigners: string;
  };
  jwt: {
    secret?: string;
    secretAuth?: string;
    public?: string;
    expire: string;
    expireRefresh: string;
  };
  paths: {
    logger?: string;
  };
}

export interface IDefines {
  status: {
    requestOK: number;
    created: number;
    noContent: number;
    badRequest: number;
    authError: number;
    forbidden: number;
    notFound: number;
    notAllowed: number;
    clientError: number;
    tooMany: number;
    serverError: number;
  };
  message: {
    tryCatch: string;
    badRequest: string;
    notFound: string;
  };
  tryCatchObject: (data: any) => {
    data: any;
    error: boolean;
    message: string;
  };
  controlerTryCatchObject: {
    status: number;
    message: string;
  };
}
