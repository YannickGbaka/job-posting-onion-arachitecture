import {Router, Request, Response} from 'express'
import coddyger from 'coddyger'
import RouterService from '../router';
import { {{pascalCase name}}Controller } from '../modules/{{name}}/';

const route = Router();
const Controller: {{pascalCase name}}Controller = new {{pascalCase name}}Controller();
const routePath = '/{{name}}';

route.post(`${routePath}/save`, (req: any, res: Response) => {
	const body: any = req.body;

	let Q = Controller.save(body);
	return coddyger.api(res, Q);
});

route.put(`${routePath}/update`, (req: any, res: Response) => {
	const body: any = req.body;

	let Q = Controller.update(body);
	return coddyger.api(res, Q);
});

route.delete(`${routePath}/remove/:payload`, (req: any, res: Response) => {
	const payload: string = req.params.payload;

	let Q = Controller.remove(payload);
	return coddyger.api(res, Q);
});

route.put(`${routePath}/restore/:payload`, (req: any, res: Response) => {
	const payload: string = req.params.payload;

	let Q = Controller.restore(payload);
	return coddyger.api(res, Q);
});

route.get(`${routePath}/select`, (req: any, res: Response) => {
	let page: any = req.query.page || 1;
	let pageSize: any = req.query.pageSize;
	let status: any = req.query.status;
	let query: any = req.query.q;

	let Q = Controller.select({ page, pageSize, status, query });
	return coddyger.api(res, Q);
});

route.get(`${routePath}/select-all`, (req: any, res: Response) => {
	let Q = Controller.selectAll();
	return coddyger.api(res, Q);
});

route.get(`${routePath}/select-one/:payload`, (req: any, res: Response) => {
	let payload: string = req.params.payload;

	let Q = Controller.selectOne(payload);
	return coddyger.api(res, Q);
});

route.get(`${routePath}/search`, (req: any, res: Response) => {
	let payload: any = req.query.payload;
	let page: any = req.query.page || 1;

	let Q = Controller.search(payload, page);
	return coddyger.api(res, Q);
});

export class {{pascalCase name}}Route {
	@RouterService.routeDecorator(route)
	static router: any;
	constructor() {}
}
